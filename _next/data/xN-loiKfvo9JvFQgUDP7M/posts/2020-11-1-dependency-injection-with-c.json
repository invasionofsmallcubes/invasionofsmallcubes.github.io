{"pageProps":{"postData":{"id":"2020-11-1-dependency-injection-with-c","c":"\nI'm teaching C programming at the Danish Technical University and I was trying to explain to my students a little bit of how to test.\n\nI find this cool library called [MinUnit](http://www.jera.com/techinfo/jtns/jtn002.html) which is just 4 lines of code:\n\n~~~ c\n/* file: minunit.h */\n#define mu_assert(message, test) do { if (!(test)) return message; } while (0)\n#define mu_run_test(test) do { char *message = test(); tests_run++; \\\n                                if (message) return message; } while (0)\nextern int tests_run;\n~~~\n\nThis allows you to organize a test file this way:\n~~~ c\n#include \"minunit.h\"\n#include \"function_under_test_source.c\"\nstatic char *test_ac1() {\n    mu_assert(\"max char, should broke, it didn't\",\n              function_under_test() == 1);\n    return 0;\n}\nstatic char *all_tests() {\n    mu_run_test(test_ac1);\n    return 0;\n}\nint main(int argc, char **argv) {\n    char *result = all_tests();\n    if (result != 0) {\n        printf(\"%s\\n\", result);\n    } else {\n        printf(\"ALL TESTS PASSED\\n\");\n    }\n    printf(\"Tests run: %d\\n\", tests_run);\n\n    return result != 0;\n}\n~~~\n\nReally cool. I was writing a function to read a string from input stream that doesn't overflow if put more chars than allowed ones. (I can't post it since it's part of the assignment for my students)\n\nBut I was having the problem of testing it because it uses `getchar` from `stdio.h`.\n\nI wanted to teach my students how to test, and hopefully a little bit of TDD. With pointer to function is actually quite easy:\n\n~~~ c\nint get_string(char s[], int maxChar, int (*getchar)()) {\n~~~\n\nThis means I'm passing a pointer to a function called `getchar` that return an int and accept no arguments, like the actual `getchar` from `stdio.h`.\n\nSo you can create a mock function to mimic I/O like:\n~~~ c\nconst char *mock_getchar_data_ptr;\n\nchar        mock_getchar() {\n    return *mock_getchar_data_ptr++;\n}\n~~~\n\nand on the test you just create the string you want to read.\n\n~~~ c\nstatic char *test_ac2() {\n    char text[100];\n    mock_getchar_data_ptr = \"\\nhello!\\n\"; // the initial \\n is there because I'm using scanf on production code (main.c)\n    get_string(text, 100, mock_getchar);\n    mu_assert(\"text is hello\", strcmp(text, \"hello!\") == 0);\n    return 0;\n}\n~~~\n\nPretty neat, right?\n","title":"Dependency injection with C","date":"2020-11-01"}},"__N_SSG":true}